unit API.Generics;

interface

uses
{$REGION '  [System''s] ..'}
  System.Classes
, System.Bindings.Outputs
, System.Generics.Collections
{$ENDREGION}
{$REGION '  [Data.Bind''s] ..'}
, Data.Bind.EngExt
, Data.Bind.ObjectScope
, Data.Bind.Components
{$ENDREGION}
{$REGION '  [Vcl''s] ..'}
, Vcl.Bind.DBEngExt
, Vcl.Bind.Editors
, Vcl.ComCtrls                   // [TListView] ..
, Vcl.Bind.Navigator             // [TBindNavigator] ..
{$ENDREGION}
, System.Generics.Defaults       // [TComparison] ..
, API.Types                      // |TSort, Helpers] ..
, Vcl.Forms                      // [aOwnerView] when binding only ..
  ;

type

  TDynamicObjectList<T: class> = class(TObjectList<T>)
  private
// [Sort Comparer] Fields ..
    fComparer: TComparison<T>;
    fSortField: string;
    fSort: TSort;
    fCustomDisplay_Expression: String;
// [Binding] Objects Fields ..
    fAdapter: TAdapterBindSource;
    fBindList: TBindingsList;
    fLinkFill: TLinkFillControlToField;
    fID: string; // Use it to fill fLinkFill expression with ListView [Caption]
    fListView: TListView;
    fOwns_Self: Boolean;
// [Sort Comparer] Methods ..
    function CompareNumbers(const L, R: Integer): Integer;
    function CompareObjects(const aLeft, aRight: T): Integer;
// [Binding] Methods ..
    procedure Setup_BindingsList;
    procedure Create_Adapter(aSender: TObject;
      var aBindSourceAdapter: TBindSourceAdapter);
    procedure Set_ListViewColumns(aLV: TListView);
  public
    constructor Create(const aSortField: string; aSort: TSort = sAsc;
       const aCustomDisplay_Expression: String = '');
    destructor Destroy; override;

    procedure Sort(aSort: TSort = sAsc);
    function IsSortedCorrectly: Boolean;

    function Bind_List(aOwnerView: TForm; aListView_ToBind: TListView;
                        aOwns_Self: Boolean = True;
                        const aID: string = 'ID'): TDynamicObjectList<T>;

    function BindNavigator(aBindNav: TBindNavigator): TDynamicObjectList<T>;
  end;

implementation

uses
  System.Rtti           // [TRttiProperty] ..
, System.SysUtils
//, Vcl.Dialogs
//, System.TypInfo
, ListView.Helper
  ;

constructor TDynamicObjectList<T>.Create(const aSortField: string; aSort: TSort = sAsc;
       const aCustomDisplay_Expression: String = '');

begin inherited Create(True);
// Initialize [Binding] Objects to nil Pointer..
  fListView  := nil;
  fAdapter   := nil;
  fID        := '';
  fBindList  := nil;
  fLinkFill  := nil;
// Assigning [Sort Comparer] Fields ..
  fSortField := aSortField;
  fSort      := aSort;
  fComparer  := CompareObjects;
  fCustomDisplay_Expression := aCustomDisplay_Expression;

end;

destructor TDynamicObjectList<T>.Destroy;
begin
  if Assigned(fAdapter) then fAdapter.Free;

  inherited;
end;

{$REGION '  [Bindings] Methods .. '}

procedure TDynamicObjectList<T>.Set_ListViewColumns(aLV: TListView);
var
  L_Prop: TRttiProperty;
begin
  aLV.Columns.Clear;
  aLV.Columns.BeginUpdate;
  try
    for L_Prop in TObject(Self[0]).RTTI_Properties do

      if L_Prop.IsReadable then
        aLV.Add_Column(L_Prop.Name, L_Prop.ColumnWidth);
  finally
    aLV.Columns.EndUpdate;
    aLV.RowSelect := True;
//    aLV.HotTrackStyles := [htHandPoint];
//    aLV.HotTrack  := True;
    aLV.ViewStyle := vsReport;
    aLV.GridLines := True;
    aLV.FlatScrollBars := True;
  end;
end;

procedure TDynamicObjectList<T>.Setup_BindingsList;
var
  L_Item    : TFormatExpressionItem;
  L_Prop    : TRttiProperty;
  I         : Byte;
begin
  fBindList.InsertComponent(fLinkFill);
  try
    with fLinkFill do begin

      Category       := 'Quick Bindings';
      Control        := fListView;
      Track          := False;
      FillDataSource := fAdapter;
      AutoFill       := True;

      I              := 0;
      for L_Prop in TObject(Self[0]).RTTI_Properties do

      try
        L_Item       := fLinkFill.FillExpressions.AddExpression;
        with L_Item do
        if L_Prop.Name = fID then begin
          SourceMemberName := fID;
          ControlMemberName:= 'Caption';
        end else begin
          SourceMemberName := L_Prop.Name;
          ControlMemberName:= 'SubItems['+ I.ToString +']';
          inc(I);
        end;
      finally

      end;

    end;
  except on Ex: Exception do
    raise Exception.CreateFmt('BindingList InsertComponent Error: "%s"', [Ex.Message]);
  end;

end;

procedure TDynamicObjectList<T>.Create_Adapter(aSender: TObject;
  var aBindSourceAdapter: TBindSourceAdapter);
begin
  aBindSourceAdapter :=
    TListBindSourceAdapter<T>.Create(
      nil, Self, fOwns_Self);
end;

function TDynamicObjectList<T>.BindNavigator(
  aBindNav: TBindNavigator): TDynamicObjectList<T>;
begin
  aBindNav.DataSource := fAdapter;
end;

function TDynamicObjectList<T>.Bind_List(aOwnerView: TForm; aListView_ToBind: TListView;
                        aOwns_Self: Boolean = True;
                        const aID: string = 'ID'): TDynamicObjectList<T>;
begin
  Result := Self;

  if Assigned(aListView_ToBind) then begin
    fListView     := aListView_ToBind;
    fAdapter      := TAdapterBindSource.Create(aOwnerView);
    fAdapter
    .AutoActivate := False;
    fBindList     := TBindingsList.Create(aOwnerView);
    fLinkFill     := TLinkFillControlToField.Create(aOwnerView);
    fID           := aID;
    try
      Set_ListViewColumns(aListView_ToBind);
      Setup_BindingsList;
    finally
      fOwns_Self := aOwns_Self;
      fAdapter.OnCreateAdapter := Create_Adapter;
    end;
  end;

  fAdapter.Active := True;
end;
{$ENDREGION}

{$REGION '  [Sort Comparer] Methods.. '}
function TDynamicObjectList<T>.CompareNumbers(const L, R: Integer): Integer;
begin
  Result := L - R;
end;

function TDynamicObjectList<T>.CompareObjects(const aLeft, aRight: T): Integer;
var
  L_Ctx: TRttiContext;
  L_Typ: TRttiType;
  L_Prop: TRttiProperty;

  L_Left: TClass absolute aLeft;
  L_Right: TClass absolute aRight;

  L_LeftValue, L_RightValue: TValue;
  L_LeftStr, L_RightStr: string;
  L_LeftInt, L_RightInt: Integer;
begin
  if fSortField = '' then
  begin
    Result := TComparer<T>.Default.Compare(T(L_Left), T(L_Right));
    Exit;
  end;

  L_Ctx := TRttiContext.Create;
  try
    L_Typ := L_Ctx.GetType(T);
    L_Prop := L_Typ.GetProperty(fSortField);

    if Assigned(L_Prop) then
    begin
      L_LeftValue := L_Prop.GetValue(L_Left);
      L_RightValue := L_Prop.GetValue(L_Right);

      case L_LeftValue.Kind of
        tkInteger, tkInt64:
          case fSort of
            sAsc: Result := CompareNumbers(L_LeftValue.AsInteger, L_RightValue.AsInteger);
            sDes: Result := CompareNumbers(L_RightValue.AsInteger, L_LeftValue.AsInteger);
          else
            Result := TComparer<T>.Default.Compare(T(L_Left), T(L_Right));
          end;
        tkString, tkWString, tkLString, tkUString:
          begin
            L_LeftStr := L_LeftValue.AsString;
            L_RightStr := L_RightValue.AsString;

            if TryStrToInt(L_LeftStr, L_LeftInt) and TryStrToInt(L_RightStr, L_RightInt) then
            begin
              case fSort of
                sAsc: Result := CompareNumbers(L_LeftInt, L_RightInt);
                sDes: Result := CompareNumbers(L_RightInt, L_LeftInt);
              else
                Result := TComparer<T>.Default.Compare(aLeft, aRight);
              end;
            end else
            begin
              case fSort of
                sAsc: Result := CompareText(L_LeftStr, L_RightStr);
                sDes: Result := CompareText(L_RightStr, L_LeftStr);
              else
                Result := TComparer<T>.Default.Compare(aLeft, aRight);
              end;
            end;
          end;
      else
        Result := TComparer<T>.Default.Compare(T(L_Left), T(L_Right));
      end;
    end else
      Result := 0;
  finally
    L_Ctx.Free;
  end;
end;

function TDynamicObjectList<T>.IsSortedCorrectly: Boolean;
var
  I: Integer;
begin
  Result := True;
  for I := 1 to Count - 1 do
  begin
    if CompareObjects(Items[I - 1], Items[I]) > 0 then
    begin
      Result := False;
      Break;
    end;
  end;
end;

procedure TDynamicObjectList<T>.Sort(aSort: TSort);
begin
  fSort := aSort;
  inherited Sort(TComparer<T>.Construct(fComparer));
end;
{$ENDREGION}

end.
